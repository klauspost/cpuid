// Code generated by "stringer -type=FeatureID,Vendor"; DO NOT EDIT.

package cpuid

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ADX-1]
	_ = x[AESNI-2]
	_ = x[AMD3DNOW-3]
	_ = x[AMD3DNOWEXT-4]
	_ = x[AMXBF16-5]
	_ = x[AMXINT8-6]
	_ = x[AMXTILE-7]
	_ = x[AVX-8]
	_ = x[AVX2-9]
	_ = x[AVX512BF16-10]
	_ = x[AVX512BITALG-11]
	_ = x[AVX512BW-12]
	_ = x[AVX512CD-13]
	_ = x[AVX512DQ-14]
	_ = x[AVX512ER-15]
	_ = x[AVX512F-16]
	_ = x[AVX512FP16-17]
	_ = x[AVX512IFMA-18]
	_ = x[AVX512PF-19]
	_ = x[AVX512VBMI-20]
	_ = x[AVX512VBMI2-21]
	_ = x[AVX512VL-22]
	_ = x[AVX512VNNI-23]
	_ = x[AVX512VP2INTERSECT-24]
	_ = x[AVX512VPOPCNTDQ-25]
	_ = x[AVXSLOW-26]
	_ = x[AVXVNNI-27]
	_ = x[BMI1-28]
	_ = x[BMI2-29]
	_ = x[CETIBT-30]
	_ = x[CETSS-31]
	_ = x[CLDEMOTE-32]
	_ = x[CLMUL-33]
	_ = x[CLZERO-34]
	_ = x[CMOV-35]
	_ = x[CMPSB_SCADBS_SHORT-36]
	_ = x[CMPXCHG8-37]
	_ = x[CPBOOST-38]
	_ = x[CPPC-39]
	_ = x[CX16-40]
	_ = x[EFER_LMSLE_UNS-41]
	_ = x[ENQCMD-42]
	_ = x[ERMS-43]
	_ = x[F16C-44]
	_ = x[FLUSH_L1D-45]
	_ = x[FMA3-46]
	_ = x[FMA4-47]
	_ = x[FP128-48]
	_ = x[FP256-49]
	_ = x[FSRM-50]
	_ = x[FXSR-51]
	_ = x[FXSROPT-52]
	_ = x[GFNI-53]
	_ = x[HLE-54]
	_ = x[HRESET-55]
	_ = x[HTT-56]
	_ = x[HWA-57]
	_ = x[HYBRID_CPU-58]
	_ = x[HYPERVISOR-59]
	_ = x[IA32_ARCH_CAP-60]
	_ = x[IA32_CORE_CAP-61]
	_ = x[IBPB-62]
	_ = x[IBRS-63]
	_ = x[IBRS_PREFERRED-64]
	_ = x[IBRS_PROVIDES_SMP-65]
	_ = x[IBS-66]
	_ = x[IBSBRNTRGT-67]
	_ = x[IBSFETCHSAM-68]
	_ = x[IBSFFV-69]
	_ = x[IBSOPCNT-70]
	_ = x[IBSOPCNTEXT-71]
	_ = x[IBSOPSAM-72]
	_ = x[IBSRDWROPCNT-73]
	_ = x[IBSRIPINVALIDCHK-74]
	_ = x[IBS_FETCH_CTLX-75]
	_ = x[IBS_OPDATA4-76]
	_ = x[IBS_OPFUSE-77]
	_ = x[IBS_PREVENTHOST-78]
	_ = x[IBS_ZEN4-79]
	_ = x[INT_WBINVD-80]
	_ = x[INVLPGB-81]
	_ = x[LAHF-82]
	_ = x[LAM-83]
	_ = x[LBRVIRT-84]
	_ = x[LZCNT-85]
	_ = x[MCAOVERFLOW-86]
	_ = x[MCDT_NO-87]
	_ = x[MCOMMIT-88]
	_ = x[MD_CLEAR-89]
	_ = x[MMX-90]
	_ = x[MMXEXT-91]
	_ = x[MOVBE-92]
	_ = x[MOVDIR64B-93]
	_ = x[MOVDIRI-94]
	_ = x[MOVSB_ZL-95]
	_ = x[MOVU-96]
	_ = x[MPX-97]
	_ = x[MSRIRC-98]
	_ = x[MSR_PAGEFLUSH-99]
	_ = x[NRIPS-100]
	_ = x[NX-101]
	_ = x[OSXSAVE-102]
	_ = x[PCONFIG-103]
	_ = x[POPCNT-104]
	_ = x[PPIN-105]
	_ = x[PSFD-106]
	_ = x[RDPRU-107]
	_ = x[RDRAND-108]
	_ = x[RDSEED-109]
	_ = x[RDTSCP-110]
	_ = x[RTM-111]
	_ = x[RTM_ALWAYS_ABORT-112]
	_ = x[SERIALIZE-113]
	_ = x[SEV-114]
	_ = x[SEV_64BIT-115]
	_ = x[SEV_ALTERNATIVE-116]
	_ = x[SEV_DEBUGSWAP-117]
	_ = x[SEV_ES-118]
	_ = x[SEV_RESTRICTED-119]
	_ = x[SEV_SNP-120]
	_ = x[SGX-121]
	_ = x[SGXLC-122]
	_ = x[SHA-123]
	_ = x[SME-124]
	_ = x[SME_COHERENT-125]
	_ = x[SPEC_CTRL_SSBD-126]
	_ = x[SRBDS_CTRL-127]
	_ = x[SSE-128]
	_ = x[SSE2-129]
	_ = x[SSE3-130]
	_ = x[SSE4-131]
	_ = x[SSE42-132]
	_ = x[SSE4A-133]
	_ = x[SSSE3-134]
	_ = x[STIBP-135]
	_ = x[STIBP_ALWAYSON-136]
	_ = x[STOSB_SHORT-137]
	_ = x[SUCCOR-138]
	_ = x[SVM-139]
	_ = x[SVMDA-140]
	_ = x[SVMFBASID-141]
	_ = x[SVML-142]
	_ = x[SVMNP-143]
	_ = x[SVMPF-144]
	_ = x[SVMPFT-145]
	_ = x[SYSCALL-146]
	_ = x[SYSEE-147]
	_ = x[TBM-148]
	_ = x[TLB_FLUSH_NESTED-149]
	_ = x[TME-150]
	_ = x[TOPEXT-151]
	_ = x[TSCRATEMSR-152]
	_ = x[TSXLDTRK-153]
	_ = x[VAES-154]
	_ = x[VMCBCLEAN-155]
	_ = x[VMPL-156]
	_ = x[VMSA_REGPROT-157]
	_ = x[VMX-158]
	_ = x[VPCLMULQDQ-159]
	_ = x[VTE-160]
	_ = x[WAITPKG-161]
	_ = x[WBNOINVD-162]
	_ = x[X87-163]
	_ = x[XGETBV1-164]
	_ = x[XOP-165]
	_ = x[XSAVE-166]
	_ = x[XSAVEC-167]
	_ = x[XSAVEOPT-168]
	_ = x[XSAVES-169]
	_ = x[AESARM-170]
	_ = x[ARMCPUID-171]
	_ = x[ASIMD-172]
	_ = x[ASIMDDP-173]
	_ = x[ASIMDHP-174]
	_ = x[ASIMDRDM-175]
	_ = x[ATOMICS-176]
	_ = x[CRC32-177]
	_ = x[DCPOP-178]
	_ = x[EVTSTRM-179]
	_ = x[FCMA-180]
	_ = x[FP-181]
	_ = x[FPHP-182]
	_ = x[GPA-183]
	_ = x[JSCVT-184]
	_ = x[LRCPC-185]
	_ = x[PMULL-186]
	_ = x[SHA1-187]
	_ = x[SHA2-188]
	_ = x[SHA3-189]
	_ = x[SHA512-190]
	_ = x[SM3-191]
	_ = x[SM4-192]
	_ = x[SVE-193]
	_ = x[lastID-194]
	_ = x[firstID-0]
}

const _FeatureID_name = "firstIDADXAESNIAMD3DNOWAMD3DNOWEXTAMXBF16AMXINT8AMXTILEAVXAVX2AVX512BF16AVX512BITALGAVX512BWAVX512CDAVX512DQAVX512ERAVX512FAVX512FP16AVX512IFMAAVX512PFAVX512VBMIAVX512VBMI2AVX512VLAVX512VNNIAVX512VP2INTERSECTAVX512VPOPCNTDQAVXSLOWAVXVNNIBMI1BMI2CETIBTCETSSCLDEMOTECLMULCLZEROCMOVCMPSB_SCADBS_SHORTCMPXCHG8CPBOOSTCPPCCX16EFER_LMSLE_UNSENQCMDERMSF16CFLUSH_L1DFMA3FMA4FP128FP256FSRMFXSRFXSROPTGFNIHLEHRESETHTTHWAHYBRID_CPUHYPERVISORIA32_ARCH_CAPIA32_CORE_CAPIBPBIBRSIBRS_PREFERREDIBRS_PROVIDES_SMPIBSIBSBRNTRGTIBSFETCHSAMIBSFFVIBSOPCNTIBSOPCNTEXTIBSOPSAMIBSRDWROPCNTIBSRIPINVALIDCHKIBS_FETCH_CTLXIBS_OPDATA4IBS_OPFUSEIBS_PREVENTHOSTIBS_ZEN4INT_WBINVDINVLPGBLAHFLAMLBRVIRTLZCNTMCAOVERFLOWMCDT_NOMCOMMITMD_CLEARMMXMMXEXTMOVBEMOVDIR64BMOVDIRIMOVSB_ZLMOVUMPXMSRIRCMSR_PAGEFLUSHNRIPSNXOSXSAVEPCONFIGPOPCNTPPINPSFDRDPRURDRANDRDSEEDRDTSCPRTMRTM_ALWAYS_ABORTSERIALIZESEVSEV_64BITSEV_ALTERNATIVESEV_DEBUGSWAPSEV_ESSEV_RESTRICTEDSEV_SNPSGXSGXLCSHASMESME_COHERENTSPEC_CTRL_SSBDSRBDS_CTRLSSESSE2SSE3SSE4SSE42SSE4ASSSE3STIBPSTIBP_ALWAYSONSTOSB_SHORTSUCCORSVMSVMDASVMFBASIDSVMLSVMNPSVMPFSVMPFTSYSCALLSYSEETBMTLB_FLUSH_NESTEDTMETOPEXTTSCRATEMSRTSXLDTRKVAESVMCBCLEANVMPLVMSA_REGPROTVMXVPCLMULQDQVTEWAITPKGWBNOINVDX87XGETBV1XOPXSAVEXSAVECXSAVEOPTXSAVESAESARMARMCPUIDASIMDASIMDDPASIMDHPASIMDRDMATOMICSCRC32DCPOPEVTSTRMFCMAFPFPHPGPAJSCVTLRCPCPMULLSHA1SHA2SHA3SHA512SM3SM4SVElastID"

var _FeatureID_index = [...]uint16{0, 7, 10, 15, 23, 34, 41, 48, 55, 58, 62, 72, 84, 92, 100, 108, 116, 123, 133, 143, 151, 161, 172, 180, 190, 208, 223, 230, 237, 241, 245, 251, 256, 264, 269, 275, 279, 297, 305, 312, 316, 320, 334, 340, 344, 348, 357, 361, 365, 370, 375, 379, 383, 390, 394, 397, 403, 406, 409, 419, 429, 442, 455, 459, 463, 477, 494, 497, 507, 518, 524, 532, 543, 551, 563, 579, 593, 604, 614, 629, 637, 647, 654, 658, 661, 668, 673, 684, 691, 698, 706, 709, 715, 720, 729, 736, 744, 748, 751, 757, 770, 775, 777, 784, 791, 797, 801, 805, 810, 816, 822, 828, 831, 847, 856, 859, 868, 883, 896, 902, 916, 923, 926, 931, 934, 937, 949, 963, 973, 976, 980, 984, 988, 993, 998, 1003, 1008, 1022, 1033, 1039, 1042, 1047, 1056, 1060, 1065, 1070, 1076, 1083, 1088, 1091, 1107, 1110, 1116, 1126, 1134, 1138, 1147, 1151, 1163, 1166, 1176, 1179, 1186, 1194, 1197, 1204, 1207, 1212, 1218, 1226, 1232, 1238, 1246, 1251, 1258, 1265, 1273, 1280, 1285, 1290, 1297, 1301, 1303, 1307, 1310, 1315, 1320, 1325, 1329, 1333, 1337, 1343, 1346, 1349, 1352, 1358}

func (i FeatureID) String() string {
	if i < 0 || i >= FeatureID(len(_FeatureID_index)-1) {
		return "FeatureID(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FeatureID_name[_FeatureID_index[i]:_FeatureID_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[VendorUnknown-0]
	_ = x[Intel-1]
	_ = x[AMD-2]
	_ = x[VIA-3]
	_ = x[Transmeta-4]
	_ = x[NSC-5]
	_ = x[KVM-6]
	_ = x[MSVM-7]
	_ = x[VMware-8]
	_ = x[XenHVM-9]
	_ = x[Bhyve-10]
	_ = x[Hygon-11]
	_ = x[SiS-12]
	_ = x[RDC-13]
	_ = x[Ampere-14]
	_ = x[ARM-15]
	_ = x[Broadcom-16]
	_ = x[Cavium-17]
	_ = x[DEC-18]
	_ = x[Fujitsu-19]
	_ = x[Infineon-20]
	_ = x[Motorola-21]
	_ = x[NVIDIA-22]
	_ = x[AMCC-23]
	_ = x[Qualcomm-24]
	_ = x[Marvell-25]
	_ = x[lastVendor-26]
}

const _Vendor_name = "VendorUnknownIntelAMDVIATransmetaNSCKVMMSVMVMwareXenHVMBhyveHygonSiSRDCAmpereARMBroadcomCaviumDECFujitsuInfineonMotorolaNVIDIAAMCCQualcommMarvelllastVendor"

var _Vendor_index = [...]uint8{0, 13, 18, 21, 24, 33, 36, 39, 43, 49, 55, 60, 65, 68, 71, 77, 80, 88, 94, 97, 104, 112, 120, 126, 130, 138, 145, 155}

func (i Vendor) String() string {
	if i < 0 || i >= Vendor(len(_Vendor_index)-1) {
		return "Vendor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Vendor_name[_Vendor_index[i]:_Vendor_index[i+1]]
}
