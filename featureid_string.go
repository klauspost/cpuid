// Code generated by "stringer -type=FeatureID,Vendor"; DO NOT EDIT.

package cpuid

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ADX-1]
	_ = x[AESNI-2]
	_ = x[AMD3DNOW-3]
	_ = x[AMD3DNOWEXT-4]
	_ = x[AMXBF16-5]
	_ = x[AMXFP16-6]
	_ = x[AMXINT8-7]
	_ = x[AMXFP8-8]
	_ = x[AMXTILE-9]
	_ = x[AMXCOMPLEX-10]
	_ = x[APX_F-11]
	_ = x[AVX-12]
	_ = x[AVX10-13]
	_ = x[AVX10_128-14]
	_ = x[AVX10_256-15]
	_ = x[AVX10_512-16]
	_ = x[AVX2-17]
	_ = x[AVX512BF16-18]
	_ = x[AVX512BITALG-19]
	_ = x[AVX512BW-20]
	_ = x[AVX512CD-21]
	_ = x[AVX512DQ-22]
	_ = x[AVX512ER-23]
	_ = x[AVX512F-24]
	_ = x[AVX512FP16-25]
	_ = x[AVX512IFMA-26]
	_ = x[AVX512PF-27]
	_ = x[AVX512VBMI-28]
	_ = x[AVX512VBMI2-29]
	_ = x[AVX512VL-30]
	_ = x[AVX512VNNI-31]
	_ = x[AVX512VP2INTERSECT-32]
	_ = x[AVX512VPOPCNTDQ-33]
	_ = x[AVXIFMA-34]
	_ = x[AVXNECONVERT-35]
	_ = x[AVXSLOW-36]
	_ = x[AVXVNNI-37]
	_ = x[AVXVNNIINT8-38]
	_ = x[AVXVNNIINT16-39]
	_ = x[BHI_CTRL-40]
	_ = x[BMI1-41]
	_ = x[BMI2-42]
	_ = x[CETIBT-43]
	_ = x[CETSS-44]
	_ = x[CLDEMOTE-45]
	_ = x[CLMUL-46]
	_ = x[CLZERO-47]
	_ = x[CMOV-48]
	_ = x[CMPCCXADD-49]
	_ = x[CMPSB_SCADBS_SHORT-50]
	_ = x[CMPXCHG8-51]
	_ = x[CPBOOST-52]
	_ = x[CPPC-53]
	_ = x[CX16-54]
	_ = x[EFER_LMSLE_UNS-55]
	_ = x[ENQCMD-56]
	_ = x[ERMS-57]
	_ = x[F16C-58]
	_ = x[FLUSH_L1D-59]
	_ = x[FMA3-60]
	_ = x[FMA4-61]
	_ = x[FP128-62]
	_ = x[FP256-63]
	_ = x[FSRM-64]
	_ = x[FXSR-65]
	_ = x[FXSROPT-66]
	_ = x[GFNI-67]
	_ = x[HLE-68]
	_ = x[HRESET-69]
	_ = x[HTT-70]
	_ = x[HWA-71]
	_ = x[HYBRID_CPU-72]
	_ = x[HYPERVISOR-73]
	_ = x[IA32_ARCH_CAP-74]
	_ = x[IA32_CORE_CAP-75]
	_ = x[IBPB-76]
	_ = x[IBPB_BRTYPE-77]
	_ = x[IBRS-78]
	_ = x[IBRS_PREFERRED-79]
	_ = x[IBRS_PROVIDES_SMP-80]
	_ = x[IBS-81]
	_ = x[IBSBRNTRGT-82]
	_ = x[IBSFETCHSAM-83]
	_ = x[IBSFFV-84]
	_ = x[IBSOPCNT-85]
	_ = x[IBSOPCNTEXT-86]
	_ = x[IBSOPSAM-87]
	_ = x[IBSRDWROPCNT-88]
	_ = x[IBSRIPINVALIDCHK-89]
	_ = x[IBS_FETCH_CTLX-90]
	_ = x[IBS_OPDATA4-91]
	_ = x[IBS_OPFUSE-92]
	_ = x[IBS_PREVENTHOST-93]
	_ = x[IBS_ZEN4-94]
	_ = x[IDPRED_CTRL-95]
	_ = x[INT_WBINVD-96]
	_ = x[INVLPGB-97]
	_ = x[KEYLOCKER-98]
	_ = x[KEYLOCKERW-99]
	_ = x[LAHF-100]
	_ = x[LAM-101]
	_ = x[LBRVIRT-102]
	_ = x[LZCNT-103]
	_ = x[MCAOVERFLOW-104]
	_ = x[MCDT_NO-105]
	_ = x[MCOMMIT-106]
	_ = x[MD_CLEAR-107]
	_ = x[MMX-108]
	_ = x[MMXEXT-109]
	_ = x[MOVBE-110]
	_ = x[MOVDIR64B-111]
	_ = x[MOVDIRI-112]
	_ = x[MOVSB_ZL-113]
	_ = x[MOVU-114]
	_ = x[MPX-115]
	_ = x[MSRIRC-116]
	_ = x[MSRLIST-117]
	_ = x[MSR_PAGEFLUSH-118]
	_ = x[NRIPS-119]
	_ = x[NX-120]
	_ = x[OSXSAVE-121]
	_ = x[PCONFIG-122]
	_ = x[POPCNT-123]
	_ = x[PPIN-124]
	_ = x[PREFETCHI-125]
	_ = x[PSFD-126]
	_ = x[RDPRU-127]
	_ = x[RDRAND-128]
	_ = x[RDSEED-129]
	_ = x[RDTSCP-130]
	_ = x[RRSBA_CTRL-131]
	_ = x[RTM-132]
	_ = x[RTM_ALWAYS_ABORT-133]
	_ = x[SBPB-134]
	_ = x[SERIALIZE-135]
	_ = x[SEV-136]
	_ = x[SEV_64BIT-137]
	_ = x[SEV_ALTERNATIVE-138]
	_ = x[SEV_DEBUGSWAP-139]
	_ = x[SEV_ES-140]
	_ = x[SEV_RESTRICTED-141]
	_ = x[SEV_SNP-142]
	_ = x[SGX-143]
	_ = x[SGXLC-144]
	_ = x[SHA-145]
	_ = x[SME-146]
	_ = x[SME_COHERENT-147]
	_ = x[SPEC_CTRL_SSBD-148]
	_ = x[SRBDS_CTRL-149]
	_ = x[SRSO_MSR_FIX-150]
	_ = x[SRSO_NO-151]
	_ = x[SRSO_USER_KERNEL_NO-152]
	_ = x[SSE-153]
	_ = x[SSE2-154]
	_ = x[SSE3-155]
	_ = x[SSE4-156]
	_ = x[SSE42-157]
	_ = x[SSE4A-158]
	_ = x[SSSE3-159]
	_ = x[STIBP-160]
	_ = x[STIBP_ALWAYSON-161]
	_ = x[STOSB_SHORT-162]
	_ = x[SUCCOR-163]
	_ = x[SVM-164]
	_ = x[SVMDA-165]
	_ = x[SVMFBASID-166]
	_ = x[SVML-167]
	_ = x[SVMNP-168]
	_ = x[SVMPF-169]
	_ = x[SVMPFT-170]
	_ = x[SYSCALL-171]
	_ = x[SYSEE-172]
	_ = x[TBM-173]
	_ = x[TDX_GUEST-174]
	_ = x[TLB_FLUSH_NESTED-175]
	_ = x[TME-176]
	_ = x[TOPEXT-177]
	_ = x[TSCRATEMSR-178]
	_ = x[TSXLDTRK-179]
	_ = x[VAES-180]
	_ = x[VMCBCLEAN-181]
	_ = x[VMPL-182]
	_ = x[VMSA_REGPROT-183]
	_ = x[VMX-184]
	_ = x[VPCLMULQDQ-185]
	_ = x[VTE-186]
	_ = x[WAITPKG-187]
	_ = x[WBNOINVD-188]
	_ = x[WRMSRNS-189]
	_ = x[X87-190]
	_ = x[XGETBV1-191]
	_ = x[XOP-192]
	_ = x[XSAVE-193]
	_ = x[XSAVEC-194]
	_ = x[XSAVEOPT-195]
	_ = x[XSAVES-196]
	_ = x[AESARM-197]
	_ = x[ARMCPUID-198]
	_ = x[ASIMD-199]
	_ = x[ASIMDDP-200]
	_ = x[ASIMDHP-201]
	_ = x[ASIMDRDM-202]
	_ = x[ATOMICS-203]
	_ = x[CRC32-204]
	_ = x[DCPOP-205]
	_ = x[EVTSTRM-206]
	_ = x[FCMA-207]
	_ = x[FHM-208]
	_ = x[FP-209]
	_ = x[FPHP-210]
	_ = x[GPA-211]
	_ = x[JSCVT-212]
	_ = x[LRCPC-213]
	_ = x[PMULL-214]
	_ = x[RNDR-215]
	_ = x[TLB-216]
	_ = x[TS-217]
	_ = x[SHA1-218]
	_ = x[SHA2-219]
	_ = x[SHA3-220]
	_ = x[SHA512-221]
	_ = x[SM3-222]
	_ = x[SM4-223]
	_ = x[SVE-224]
	_ = x[lastID-225]
	_ = x[firstID-0]
}

const _FeatureID_name = "firstIDADXAESNIAMD3DNOWAMD3DNOWEXTAMXBF16AMXFP16AMXINT8AMXFP8AMXTILEAMXCOMPLEXAPX_FAVXAVX10AVX10_128AVX10_256AVX10_512AVX2AVX512BF16AVX512BITALGAVX512BWAVX512CDAVX512DQAVX512ERAVX512FAVX512FP16AVX512IFMAAVX512PFAVX512VBMIAVX512VBMI2AVX512VLAVX512VNNIAVX512VP2INTERSECTAVX512VPOPCNTDQAVXIFMAAVXNECONVERTAVXSLOWAVXVNNIAVXVNNIINT8AVXVNNIINT16BHI_CTRLBMI1BMI2CETIBTCETSSCLDEMOTECLMULCLZEROCMOVCMPCCXADDCMPSB_SCADBS_SHORTCMPXCHG8CPBOOSTCPPCCX16EFER_LMSLE_UNSENQCMDERMSF16CFLUSH_L1DFMA3FMA4FP128FP256FSRMFXSRFXSROPTGFNIHLEHRESETHTTHWAHYBRID_CPUHYPERVISORIA32_ARCH_CAPIA32_CORE_CAPIBPBIBPB_BRTYPEIBRSIBRS_PREFERREDIBRS_PROVIDES_SMPIBSIBSBRNTRGTIBSFETCHSAMIBSFFVIBSOPCNTIBSOPCNTEXTIBSOPSAMIBSRDWROPCNTIBSRIPINVALIDCHKIBS_FETCH_CTLXIBS_OPDATA4IBS_OPFUSEIBS_PREVENTHOSTIBS_ZEN4IDPRED_CTRLINT_WBINVDINVLPGBKEYLOCKERKEYLOCKERWLAHFLAMLBRVIRTLZCNTMCAOVERFLOWMCDT_NOMCOMMITMD_CLEARMMXMMXEXTMOVBEMOVDIR64BMOVDIRIMOVSB_ZLMOVUMPXMSRIRCMSRLISTMSR_PAGEFLUSHNRIPSNXOSXSAVEPCONFIGPOPCNTPPINPREFETCHIPSFDRDPRURDRANDRDSEEDRDTSCPRRSBA_CTRLRTMRTM_ALWAYS_ABORTSBPBSERIALIZESEVSEV_64BITSEV_ALTERNATIVESEV_DEBUGSWAPSEV_ESSEV_RESTRICTEDSEV_SNPSGXSGXLCSHASMESME_COHERENTSPEC_CTRL_SSBDSRBDS_CTRLSRSO_MSR_FIXSRSO_NOSRSO_USER_KERNEL_NOSSESSE2SSE3SSE4SSE42SSE4ASSSE3STIBPSTIBP_ALWAYSONSTOSB_SHORTSUCCORSVMSVMDASVMFBASIDSVMLSVMNPSVMPFSVMPFTSYSCALLSYSEETBMTDX_GUESTTLB_FLUSH_NESTEDTMETOPEXTTSCRATEMSRTSXLDTRKVAESVMCBCLEANVMPLVMSA_REGPROTVMXVPCLMULQDQVTEWAITPKGWBNOINVDWRMSRNSX87XGETBV1XOPXSAVEXSAVECXSAVEOPTXSAVESAESARMARMCPUIDASIMDASIMDDPASIMDHPASIMDRDMATOMICSCRC32DCPOPEVTSTRMFCMAFHMFPFPHPGPAJSCVTLRCPCPMULLRNDRTLBTSSHA1SHA2SHA3SHA512SM3SM4SVElastID"

var _FeatureID_index = [...]uint16{0, 7, 10, 15, 23, 34, 41, 48, 55, 61, 68, 78, 83, 86, 91, 100, 109, 118, 122, 132, 144, 152, 160, 168, 176, 183, 193, 203, 211, 221, 232, 240, 250, 268, 283, 290, 302, 309, 316, 327, 339, 347, 351, 355, 361, 366, 374, 379, 385, 389, 398, 416, 424, 431, 435, 439, 453, 459, 463, 467, 476, 480, 484, 489, 494, 498, 502, 509, 513, 516, 522, 525, 528, 538, 548, 561, 574, 578, 589, 593, 607, 624, 627, 637, 648, 654, 662, 673, 681, 693, 709, 723, 734, 744, 759, 767, 778, 788, 795, 804, 814, 818, 821, 828, 833, 844, 851, 858, 866, 869, 875, 880, 889, 896, 904, 908, 911, 917, 924, 937, 942, 944, 951, 958, 964, 968, 977, 981, 986, 992, 998, 1004, 1014, 1017, 1033, 1037, 1046, 1049, 1058, 1073, 1086, 1092, 1106, 1113, 1116, 1121, 1124, 1127, 1139, 1153, 1163, 1175, 1182, 1201, 1204, 1208, 1212, 1216, 1221, 1226, 1231, 1236, 1250, 1261, 1267, 1270, 1275, 1284, 1288, 1293, 1298, 1304, 1311, 1316, 1319, 1328, 1344, 1347, 1353, 1363, 1371, 1375, 1384, 1388, 1400, 1403, 1413, 1416, 1423, 1431, 1438, 1441, 1448, 1451, 1456, 1462, 1470, 1476, 1482, 1490, 1495, 1502, 1509, 1517, 1524, 1529, 1534, 1541, 1545, 1548, 1550, 1554, 1557, 1562, 1567, 1572, 1576, 1579, 1581, 1585, 1589, 1593, 1599, 1602, 1605, 1608, 1614}

func (i FeatureID) String() string {
	if i < 0 || i >= FeatureID(len(_FeatureID_index)-1) {
		return "FeatureID(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FeatureID_name[_FeatureID_index[i]:_FeatureID_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[VendorUnknown-0]
	_ = x[Intel-1]
	_ = x[AMD-2]
	_ = x[VIA-3]
	_ = x[Transmeta-4]
	_ = x[NSC-5]
	_ = x[KVM-6]
	_ = x[MSVM-7]
	_ = x[VMware-8]
	_ = x[XenHVM-9]
	_ = x[Bhyve-10]
	_ = x[Hygon-11]
	_ = x[SiS-12]
	_ = x[RDC-13]
	_ = x[Ampere-14]
	_ = x[ARM-15]
	_ = x[Broadcom-16]
	_ = x[Cavium-17]
	_ = x[DEC-18]
	_ = x[Fujitsu-19]
	_ = x[Infineon-20]
	_ = x[Motorola-21]
	_ = x[NVIDIA-22]
	_ = x[AMCC-23]
	_ = x[Qualcomm-24]
	_ = x[Marvell-25]
	_ = x[QEMU-26]
	_ = x[QNX-27]
	_ = x[ACRN-28]
	_ = x[SRE-29]
	_ = x[Apple-30]
	_ = x[lastVendor-31]
}

const _Vendor_name = "VendorUnknownIntelAMDVIATransmetaNSCKVMMSVMVMwareXenHVMBhyveHygonSiSRDCAmpereARMBroadcomCaviumDECFujitsuInfineonMotorolaNVIDIAAMCCQualcommMarvellQEMUQNXACRNSREApplelastVendor"

var _Vendor_index = [...]uint8{0, 13, 18, 21, 24, 33, 36, 39, 43, 49, 55, 60, 65, 68, 71, 77, 80, 88, 94, 97, 104, 112, 120, 126, 130, 138, 145, 149, 152, 156, 159, 164, 174}

func (i Vendor) String() string {
	if i < 0 || i >= Vendor(len(_Vendor_index)-1) {
		return "Vendor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Vendor_name[_Vendor_index[i]:_Vendor_index[i+1]]
}
