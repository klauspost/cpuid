// Code generated by "stringer -type=FeatureID,Vendor"; DO NOT EDIT.

package cpuid

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ADX-1]
	_ = x[AESNI-2]
	_ = x[AMD3DNOW-3]
	_ = x[AMD3DNOWEXT-4]
	_ = x[AMXBF16-5]
	_ = x[AMXFP16-6]
	_ = x[AMXINT8-7]
	_ = x[AMXTILE-8]
	_ = x[AVX-9]
	_ = x[AVX2-10]
	_ = x[AVX512BF16-11]
	_ = x[AVX512BITALG-12]
	_ = x[AVX512BW-13]
	_ = x[AVX512CD-14]
	_ = x[AVX512DQ-15]
	_ = x[AVX512ER-16]
	_ = x[AVX512F-17]
	_ = x[AVX512FP16-18]
	_ = x[AVX512IFMA-19]
	_ = x[AVX512PF-20]
	_ = x[AVX512VBMI-21]
	_ = x[AVX512VBMI2-22]
	_ = x[AVX512VL-23]
	_ = x[AVX512VNNI-24]
	_ = x[AVX512VP2INTERSECT-25]
	_ = x[AVX512VPOPCNTDQ-26]
	_ = x[AVXSLOW-27]
	_ = x[AVXVNNI-28]
	_ = x[BMI1-29]
	_ = x[BMI2-30]
	_ = x[CETIBT-31]
	_ = x[CETSS-32]
	_ = x[CLDEMOTE-33]
	_ = x[CLMUL-34]
	_ = x[CLZERO-35]
	_ = x[CMOV-36]
	_ = x[CMPSB_SCADBS_SHORT-37]
	_ = x[CMPXCHG8-38]
	_ = x[CPBOOST-39]
	_ = x[CPPC-40]
	_ = x[CX16-41]
	_ = x[EFER_LMSLE_UNS-42]
	_ = x[ENQCMD-43]
	_ = x[ERMS-44]
	_ = x[F16C-45]
	_ = x[FLUSH_L1D-46]
	_ = x[FMA3-47]
	_ = x[FMA4-48]
	_ = x[FP128-49]
	_ = x[FP256-50]
	_ = x[FSRM-51]
	_ = x[FXSR-52]
	_ = x[FXSROPT-53]
	_ = x[GFNI-54]
	_ = x[HLE-55]
	_ = x[HRESET-56]
	_ = x[HTT-57]
	_ = x[HWA-58]
	_ = x[HYBRID_CPU-59]
	_ = x[HYPERVISOR-60]
	_ = x[IA32_ARCH_CAP-61]
	_ = x[IA32_CORE_CAP-62]
	_ = x[IBPB-63]
	_ = x[IBRS-64]
	_ = x[IBRS_PREFERRED-65]
	_ = x[IBRS_PROVIDES_SMP-66]
	_ = x[IBS-67]
	_ = x[IBSBRNTRGT-68]
	_ = x[IBSFETCHSAM-69]
	_ = x[IBSFFV-70]
	_ = x[IBSOPCNT-71]
	_ = x[IBSOPCNTEXT-72]
	_ = x[IBSOPSAM-73]
	_ = x[IBSRDWROPCNT-74]
	_ = x[IBSRIPINVALIDCHK-75]
	_ = x[IBS_FETCH_CTLX-76]
	_ = x[IBS_OPDATA4-77]
	_ = x[IBS_OPFUSE-78]
	_ = x[IBS_PREVENTHOST-79]
	_ = x[IBS_ZEN4-80]
	_ = x[INT_WBINVD-81]
	_ = x[INVLPGB-82]
	_ = x[LAHF-83]
	_ = x[LAM-84]
	_ = x[LBRVIRT-85]
	_ = x[LZCNT-86]
	_ = x[MCAOVERFLOW-87]
	_ = x[MCDT_NO-88]
	_ = x[MCOMMIT-89]
	_ = x[MD_CLEAR-90]
	_ = x[MMX-91]
	_ = x[MMXEXT-92]
	_ = x[MOVBE-93]
	_ = x[MOVDIR64B-94]
	_ = x[MOVDIRI-95]
	_ = x[MOVSB_ZL-96]
	_ = x[MOVU-97]
	_ = x[MPX-98]
	_ = x[MSRIRC-99]
	_ = x[MSR_PAGEFLUSH-100]
	_ = x[NRIPS-101]
	_ = x[NX-102]
	_ = x[OSXSAVE-103]
	_ = x[PCONFIG-104]
	_ = x[POPCNT-105]
	_ = x[PPIN-106]
	_ = x[PREFETCHI-107]
	_ = x[PSFD-108]
	_ = x[RDPRU-109]
	_ = x[RDRAND-110]
	_ = x[RDSEED-111]
	_ = x[RDTSCP-112]
	_ = x[RTM-113]
	_ = x[RTM_ALWAYS_ABORT-114]
	_ = x[SERIALIZE-115]
	_ = x[SEV-116]
	_ = x[SEV_64BIT-117]
	_ = x[SEV_ALTERNATIVE-118]
	_ = x[SEV_DEBUGSWAP-119]
	_ = x[SEV_ES-120]
	_ = x[SEV_RESTRICTED-121]
	_ = x[SEV_SNP-122]
	_ = x[SGX-123]
	_ = x[SGXLC-124]
	_ = x[SHA-125]
	_ = x[SME-126]
	_ = x[SME_COHERENT-127]
	_ = x[SPEC_CTRL_SSBD-128]
	_ = x[SRBDS_CTRL-129]
	_ = x[SSE-130]
	_ = x[SSE2-131]
	_ = x[SSE3-132]
	_ = x[SSE4-133]
	_ = x[SSE42-134]
	_ = x[SSE4A-135]
	_ = x[SSSE3-136]
	_ = x[STIBP-137]
	_ = x[STIBP_ALWAYSON-138]
	_ = x[STOSB_SHORT-139]
	_ = x[SUCCOR-140]
	_ = x[SVM-141]
	_ = x[SVMDA-142]
	_ = x[SVMFBASID-143]
	_ = x[SVML-144]
	_ = x[SVMNP-145]
	_ = x[SVMPF-146]
	_ = x[SVMPFT-147]
	_ = x[SYSCALL-148]
	_ = x[SYSEE-149]
	_ = x[TBM-150]
	_ = x[TLB_FLUSH_NESTED-151]
	_ = x[TME-152]
	_ = x[TOPEXT-153]
	_ = x[TSCRATEMSR-154]
	_ = x[TSXLDTRK-155]
	_ = x[VAES-156]
	_ = x[VMCBCLEAN-157]
	_ = x[VMPL-158]
	_ = x[VMSA_REGPROT-159]
	_ = x[VMX-160]
	_ = x[VPCLMULQDQ-161]
	_ = x[VTE-162]
	_ = x[WAITPKG-163]
	_ = x[WBNOINVD-164]
	_ = x[X87-165]
	_ = x[XGETBV1-166]
	_ = x[XOP-167]
	_ = x[XSAVE-168]
	_ = x[XSAVEC-169]
	_ = x[XSAVEOPT-170]
	_ = x[XSAVES-171]
	_ = x[AESARM-172]
	_ = x[ARMCPUID-173]
	_ = x[ASIMD-174]
	_ = x[ASIMDDP-175]
	_ = x[ASIMDHP-176]
	_ = x[ASIMDRDM-177]
	_ = x[ATOMICS-178]
	_ = x[CRC32-179]
	_ = x[DCPOP-180]
	_ = x[EVTSTRM-181]
	_ = x[FCMA-182]
	_ = x[FP-183]
	_ = x[FPHP-184]
	_ = x[GPA-185]
	_ = x[JSCVT-186]
	_ = x[LRCPC-187]
	_ = x[PMULL-188]
	_ = x[SHA1-189]
	_ = x[SHA2-190]
	_ = x[SHA3-191]
	_ = x[SHA512-192]
	_ = x[SM3-193]
	_ = x[SM4-194]
	_ = x[SVE-195]
	_ = x[lastID-196]
	_ = x[firstID-0]
}

const _FeatureID_name = "firstIDADXAESNIAMD3DNOWAMD3DNOWEXTAMXBF16AMXFP16AMXINT8AMXTILEAVXAVX2AVX512BF16AVX512BITALGAVX512BWAVX512CDAVX512DQAVX512ERAVX512FAVX512FP16AVX512IFMAAVX512PFAVX512VBMIAVX512VBMI2AVX512VLAVX512VNNIAVX512VP2INTERSECTAVX512VPOPCNTDQAVXSLOWAVXVNNIBMI1BMI2CETIBTCETSSCLDEMOTECLMULCLZEROCMOVCMPSB_SCADBS_SHORTCMPXCHG8CPBOOSTCPPCCX16EFER_LMSLE_UNSENQCMDERMSF16CFLUSH_L1DFMA3FMA4FP128FP256FSRMFXSRFXSROPTGFNIHLEHRESETHTTHWAHYBRID_CPUHYPERVISORIA32_ARCH_CAPIA32_CORE_CAPIBPBIBRSIBRS_PREFERREDIBRS_PROVIDES_SMPIBSIBSBRNTRGTIBSFETCHSAMIBSFFVIBSOPCNTIBSOPCNTEXTIBSOPSAMIBSRDWROPCNTIBSRIPINVALIDCHKIBS_FETCH_CTLXIBS_OPDATA4IBS_OPFUSEIBS_PREVENTHOSTIBS_ZEN4INT_WBINVDINVLPGBLAHFLAMLBRVIRTLZCNTMCAOVERFLOWMCDT_NOMCOMMITMD_CLEARMMXMMXEXTMOVBEMOVDIR64BMOVDIRIMOVSB_ZLMOVUMPXMSRIRCMSR_PAGEFLUSHNRIPSNXOSXSAVEPCONFIGPOPCNTPPINPREFETCHIPSFDRDPRURDRANDRDSEEDRDTSCPRTMRTM_ALWAYS_ABORTSERIALIZESEVSEV_64BITSEV_ALTERNATIVESEV_DEBUGSWAPSEV_ESSEV_RESTRICTEDSEV_SNPSGXSGXLCSHASMESME_COHERENTSPEC_CTRL_SSBDSRBDS_CTRLSSESSE2SSE3SSE4SSE42SSE4ASSSE3STIBPSTIBP_ALWAYSONSTOSB_SHORTSUCCORSVMSVMDASVMFBASIDSVMLSVMNPSVMPFSVMPFTSYSCALLSYSEETBMTLB_FLUSH_NESTEDTMETOPEXTTSCRATEMSRTSXLDTRKVAESVMCBCLEANVMPLVMSA_REGPROTVMXVPCLMULQDQVTEWAITPKGWBNOINVDX87XGETBV1XOPXSAVEXSAVECXSAVEOPTXSAVESAESARMARMCPUIDASIMDASIMDDPASIMDHPASIMDRDMATOMICSCRC32DCPOPEVTSTRMFCMAFPFPHPGPAJSCVTLRCPCPMULLSHA1SHA2SHA3SHA512SM3SM4SVElastID"

var _FeatureID_index = [...]uint16{0, 7, 10, 15, 23, 34, 41, 48, 55, 62, 65, 69, 79, 91, 99, 107, 115, 123, 130, 140, 150, 158, 168, 179, 187, 197, 215, 230, 237, 244, 248, 252, 258, 263, 271, 276, 282, 286, 304, 312, 319, 323, 327, 341, 347, 351, 355, 364, 368, 372, 377, 382, 386, 390, 397, 401, 404, 410, 413, 416, 426, 436, 449, 462, 466, 470, 484, 501, 504, 514, 525, 531, 539, 550, 558, 570, 586, 600, 611, 621, 636, 644, 654, 661, 665, 668, 675, 680, 691, 698, 705, 713, 716, 722, 727, 736, 743, 751, 755, 758, 764, 777, 782, 784, 791, 798, 804, 808, 817, 821, 826, 832, 838, 844, 847, 863, 872, 875, 884, 899, 912, 918, 932, 939, 942, 947, 950, 953, 965, 979, 989, 992, 996, 1000, 1004, 1009, 1014, 1019, 1024, 1038, 1049, 1055, 1058, 1063, 1072, 1076, 1081, 1086, 1092, 1099, 1104, 1107, 1123, 1126, 1132, 1142, 1150, 1154, 1163, 1167, 1179, 1182, 1192, 1195, 1202, 1210, 1213, 1220, 1223, 1228, 1234, 1242, 1248, 1254, 1262, 1267, 1274, 1281, 1289, 1296, 1301, 1306, 1313, 1317, 1319, 1323, 1326, 1331, 1336, 1341, 1345, 1349, 1353, 1359, 1362, 1365, 1368, 1374}

func (i FeatureID) String() string {
	if i < 0 || i >= FeatureID(len(_FeatureID_index)-1) {
		return "FeatureID(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FeatureID_name[_FeatureID_index[i]:_FeatureID_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[VendorUnknown-0]
	_ = x[Intel-1]
	_ = x[AMD-2]
	_ = x[VIA-3]
	_ = x[Transmeta-4]
	_ = x[NSC-5]
	_ = x[KVM-6]
	_ = x[MSVM-7]
	_ = x[VMware-8]
	_ = x[XenHVM-9]
	_ = x[Bhyve-10]
	_ = x[Hygon-11]
	_ = x[SiS-12]
	_ = x[RDC-13]
	_ = x[Ampere-14]
	_ = x[ARM-15]
	_ = x[Broadcom-16]
	_ = x[Cavium-17]
	_ = x[DEC-18]
	_ = x[Fujitsu-19]
	_ = x[Infineon-20]
	_ = x[Motorola-21]
	_ = x[NVIDIA-22]
	_ = x[AMCC-23]
	_ = x[Qualcomm-24]
	_ = x[Marvell-25]
	_ = x[lastVendor-26]
}

const _Vendor_name = "VendorUnknownIntelAMDVIATransmetaNSCKVMMSVMVMwareXenHVMBhyveHygonSiSRDCAmpereARMBroadcomCaviumDECFujitsuInfineonMotorolaNVIDIAAMCCQualcommMarvelllastVendor"

var _Vendor_index = [...]uint8{0, 13, 18, 21, 24, 33, 36, 39, 43, 49, 55, 60, 65, 68, 71, 77, 80, 88, 94, 97, 104, 112, 120, 126, 130, 138, 145, 155}

func (i Vendor) String() string {
	if i < 0 || i >= Vendor(len(_Vendor_index)-1) {
		return "Vendor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Vendor_name[_Vendor_index[i]:_Vendor_index[i+1]]
}
